{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","useEffect","a","get","request","data","results","fetchData","className","map","movie","key","id","src","poster_path","backdrop_path","alt","name","APIKEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","console","log","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.739fdb38.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst instance = axios.create({\n\tbaseURL: 'https://api.themoviedb.org/3',\n});\n\nexport default instance","import React, { useState, useEffect } from 'react'\nimport axios from './axios';\nimport './Row.css'\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }){\n\tconst [movies, setMovies] = useState([]);\n\t// const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n\t// A snippet of code which runs based on a specific condition\n\tuseEffect(()=>{\n\t\t// if [], run once when the row loads, and don't run again\n\t\tasync function fetchData(){\n\t\t\tconst request = await axios.get(fetchUrl);\n\t\t\tsetMovies(request.data.results)\n\t\t\treturn request;\n\t\t}\n\t\tfetchData();\n\t}, [fetchUrl]);\n\n\t// const handleClick = (movie) => {\n\t// \tif(trailerUrl){\n\t// \t\tsetTrailerUrl('');\n\t// \t} else{\n\t// \t\tmovieTrailer(movie?.name || \"\")\n\t// \t\t.then((url) => {\n\t// \t\t\t// https://www.youtube.com/watch?v=XtMThy8QKqU\n\t// \t\t\tconst urlParams = new URLSearchParams(new URL(url).search);\n\t// \t\t\tsetTrailerUrl(urlParams.get('v'));\n\t// \t\t})\n\t// \t\t.catch(error => console.log(error));\n\t// \t}\n\t// }\n\n\treturn (\n\t\t<div className=\"row\">\n\t\t   <h2>{title}</h2>\n\t\t   \n\t\t   <div className=\"row__posters\">\n\t\t   {/* container -> posters */}\n\n\t\t   {movies.map(movie => (\n                <img\n                 key={movie.id}\n                 className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                 src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} \n                 alt={movie.name} />\n\t\t   \t))}\n\n\t\t   </div>\n\t\t</div>\n\t)\n}\n\nexport default Row","const APIKEY = '19f84e11932abbc79e6d83f82d6d1045'\n\nconst requests = {\n\tfetchTrending : `/trending/all/week?api_key=${APIKEY}&language=en-US`,\n\tfetchNetflixOriginals : `/discover/tv?api_key=${APIKEY}&with_networks=213`,\n\tfetchTopRated : `/movie/top_rated/?api_key=${APIKEY}&language=en-US`,\n\tfetchActionMovies : `/discover/movie/?api_key=${APIKEY}&with_genres=28`,\n\tfetchComedyMovies: `/discover/movie/?api_key=${APIKEY}&with_genres=35`,\n\tfetchHorrorMovies: `/discover/movie/?api_key=${APIKEY}&with_genres=27`,\n\tfetchRomanceMovies: `/discover/movie/?api_key=${APIKEY}&with_genres=10749`,\n\tfetchDocumentaries :`/discover/movie/?api_key=${APIKEY}&with_genres=99`,\n}\n\nexport default requests","import React, { useState, useEffect } from 'react'\nimport axios from './axios'\nimport requests from './requests'\nimport './Banner.css'\n\nfunction Banner(){\n\tconst [movie, setMovie] = useState([]);\n\n\tuseEffect(() => {\n\t\tasync function fetchData(){\n\t\t\tconst request = await axios.get(requests.fetchNetflixOriginals)\n\t\t\tsetMovie(\n\t\t\t\trequest.data.results[\n\t\t\t\tMath.floor(Math.random() * request.data.results.length - 1)\n\t\t\t  ]\n\t\t  );\n\t\t  return request;\n\t\t}\n\t\tfetchData();\n\t},[]);\n\n\tconsole.log(movie)\n\n\tfunction truncate(str, n){\n\t\treturn str?.length > n ? str.substr(0, n-1) + \"...\" : str;\n\t}\n\n\treturn (\n\t\t<header className=\"banner\"\n\t\t\tstyle={{\n\t\t\t\tbackgroundSize:\"cover\",\n\t\t\t\tbackgroundImage: `url(\n\t\t\t\t\t\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n\t\t\t\t)`,\n\t\t\t\tbackgroundPosition: \"center center\",\n\t\t\t}}\n\t\t>\n\t\t\t<div className=\"banner__contents\">\n\t\t\t\t<h1 className=\"banner__title\">\n\t\t\t\t\t{movie?.title || movie?.name || movie?.original_name}\n\t\t\t\t</h1>\n\n\t\t\t\t<div className=\"banner__buttons\">\n\t\t\t\t\t<button className=\"banner__button\">Play</button>\n\t\t\t\t\t<button className=\"banner__button\">My List</button>\n\t\t\t\t</div>\t\n\t\t\t\t<h1 className=\"banner__description\">\n\t\t\t\t\t{truncate(movie?.overview, 150)}\n\t\t\t\t\t\n\t\t\t\t</h1>\t\n\t\t\t\t\n\t\t\t</div>\n\n\t\t\t<div className=\"banner--fadeBottom\" />\n\t\t</header>\n\t)\n}\n\nexport default Banner","import React, { useEffect, useState } from 'react'\nimport './Nav.css'\n\nfunction Nav(){\n\tconst [show, handleShow] = useState(false);\n\n\tuseEffect(() => {\n\t\twindow.addEventListener('scroll', ()=>{\n\t\t\tif (window.scrollY > 100){\n\t\t\t\thandleShow(true);\n\t\t\t} else handleShow(false);\n\t\t});\n\t\treturn () => {\n\t\t\twindow.removeEventListener('scroll');\n\t\t};\n\t}, []);\n\n\treturn (\n\t\t<div className={`nav ${show && \"nav__black\"}`}>\n\t\t\t<img\n\t\t\t\tclassName=\"nav__logo\"\n\t\t\t\tsrc=\"https://upload.wikimedia.org/wikipedia/commons/0/0f/Logo_Netflix.png\"\n\t\t\t\talt=\"Netflix logo\"\n\t\t\t/>\n\t\t\t<img\n\t\t\t\tclassName=\"nav__avatar\"\n\t\t\t\tsrc=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\n\t\t\t\talt=\"Netflix logo\"\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default Nav","import React from 'react';\nimport './App.css';\nimport Row from './Row'\nimport requests from './requests'\nimport Banner from './Banner'\nimport Nav from './Nav'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n    <Nav />\n    <Banner />\n    <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals} isLargeRow/>\n    <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending}/>\n    <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n    <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies}/>\n    <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\n    <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}/>\n    <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies}/>\n    <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries}/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}